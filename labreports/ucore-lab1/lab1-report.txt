-- 练习1：了解lab1的proj1~proj3

1. ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)

答：Makefile按照如下步骤生成ucore.img（proj1下的ucore.img）：
（1）为每一个源文件（.c和.S文件）产生一个描述其依赖关系的makefile文件，以.d为后缀。即对于一个源文件“NAME.c”，对应的这个makefile文件为“NAME.d”。包括分别生成sign.c、bootmain.c、bootasm.S的makefile依赖文件sign.d、bootmain.d、bootasm.d，具体执行的命令如下：
	mkdir -p obj/sign/tools
	gcc -Itools/ -g -Wall -O2 -MM tools/sign.c -MT "obj/sign/tools/sign.o obj/sign/tools/sign.d"> obj/sign/tools/sign.d
	mkdir -p obj/boot
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc -MM boot/bootmain.c -MT "obj/boot/bootmain.o obj/boot/bootmain.d"> obj/boot/bootmain.d
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc -MM boot/bootasm.S -MT "obj/boot/bootasm.o obj/boot/bootasm.d"> obj/boot/bootasm.d
gcc重要的编译参数：
-I<dir>		指定搜索系统头文件的目录，可以重复使用多个该选项指定多个目录
-Wall		显示所有的警告消息
-O2		优化（级别为2）
-m32		指明目标代码32位
-Os		对生成的二进制代码进行尺寸上的优化
-ggdb		提供编译信息
-nostdinc	只为头文件寻找-I选项指定的目录
-fno-builtin	除非利用"__builtin_"进行引用，否则不识别所有内建函数
-fno-stack-protector	不检测缓存溢出

（2）编译源文件，只生成目标文件但不链接。包括由bootasm.S、bootmain.c、sign.c分别生成bootasm.o、bootmain.o、sign.o。具体执行的命令如下：
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o
	gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -nostdinc -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o
	gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o
gcc重要的编译参数：
-c		完成编译或汇编工作，但是不链接，以目标文件（.o）形式输出

（3）由目标文件sign.o生成可执行文件sign，生成sign工具（生成引导区内容）
	mkdir -p bin
	gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign

（4）链接bootasm.o、bootmain.o生成bootblock.o，设定程序入口为start，地址为0x7C00。具体执行的命令如下：
	ld -m    elf_i386 -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
ld链接参数：
-e		设置程序入口位置
-Ttext		设置函数地址
-m elf_i386	设定为i386平台ELF执行文件格式

（5）将bootblock.o内容进行反汇编，写入文件bootblock.asm。具体执行的命令如下：
	objdump -S obj/bootblock.o > obj/bootblock.asm
命令参数含义：
-S	源代码中混合有反汇编

（6）将目标文件bootblock.out全部内容拷贝到bootblock.o中，并转换为raw二进制（raw binary）格式。具体执行的命令如下：
	objcopy -S -O binary obj/bootblock.o obj/bootblock.out
命令参数含义：
-S		去除掉源文件的符号信息和重分配信息
-O binary	生成二进制（binary）格式的输出文件

（7）使用sign工具生成引导区内容装载bootblock.out，生成bin目录下的bootblock。具体执行的命令如下：
	bin/sign obj/bootblock.out bin/bootblock

（8）生成ucore.img。分两步：先使用空白字符（/dev/zero）初始化ucore.img，再以bootblock为输入，输出最终硬盘镜像ucore.img。具体执行的命令如下：
	dd if=/dev/zero of=bin/ucore.img count=10000
	dd if=bin/bootblock of=bin/ucore.img conv=notrunc
命令参数含义：
if=file		输入文件名，缺省为标准输入
of=file		输出文件名，缺省为标准输出
count=blocks	仅拷贝 blocks 个块，块大小等于 ibs 指定的字节数
conv=conversion[,conversion...]		用指定的参数转换文件
	notrunc	不截短输出文件

2. 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？

答：根据代码sign.c中的内容，一个被系统认为是符合规范的硬盘主引导扇区具有如下特征：
（1）硬盘主引导扇区共512（200h）字节；
（2）硬盘主引导程序大小不超过510字节，且位于主引导扇区第0-509（0-1FDh）字节，若程序大小不足510字节，剩余空间补零；
（3）引导扇区有有效标志，位于第510-511（1FEh-1FFh）字节处，值为AA55h，即1FEh字节存0x55，1FFh字节存0xAA。


-- 练习2：使用qemu执行并调试lab1中的软件

1. 从0xf:0xfff0开始单步跟踪BIOS的执行。
答：在ucore.img所在目录执行如下命令（proj1下的ucore.img）：
qemu -S -hda ucore.img -monitor stdio -d in_asm
其中-d in_asm选项设置将实际执行的反汇编代码输出至/tmp/qemu.log。由此可以分析BIOS的执行。部分如下：
	----------------
	IN: 
	0xfffffff0:  ljmp   $0xf000,$0xe05b

	----------------
	IN: 
	0x000fe05b:  jmp    0xfc81e

	----------------
	IN: 
	0x000fc81e:  mov    %cr0,%eax
	0x000fc821:  and    $0x9fffffff,%eax
	0x000fc827:  mov    %eax,%cr0

	----------------
	IN: 
	0x000fc82a:  cli    
	0x000fc82b:  cld    
	0x000fc82c:  mov    $0x8f,%eax
	0x000fc832:  out    %al,$0x70
	0x000fc834:  in     $0x71,%al
	0x000fc836:  cmp    $0x0,%al
	0x000fc838:  jne    0xfc84d

2. 在初始化位置0x7c00设置实地址断点,测试断点正常。
答：在tools/gdbinit文件里加入
	break *0x7c00
同时通过如下配置在每次gdb命令行前强制反汇编当前的指令：
	define hook-stop
	x /i $pc
	end
使用如下命令
	make debug
调试，结果如下：
	0x0000fff0 in ?? ()
	Breakpoint 1 at 0x7c00: file boot/bootasm.S, line 15.
	Breakpoint 2 at 0x7c74: file boot/bootmain.c, line 87.
	(gdb) c
	Continuing.
	=> 0x7c00 <start>:	cli    

	Breakpoint 1, start () at boot/bootasm.S:15
	15		cli						# Disable interrupts
	(gdb) stepi
	=> 0x7c01 <start+1>:	cld    
	16		cld						# String operations increment
	(gdb) stepi
	=> 0x7c02 <start+2>:	xor    %eax,%eax
	19		xorw %ax, %ax					# Segment number zero
说明断点设置正常。

3. 从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和 bootblock.asm进行比较。
答：从0x7c00开始跟踪代码运行，结果如下：
	0x0000fff0 in ?? ()
	Breakpoint 1 at 0x7c00: file boot/bootasm.S, line 15.
	Breakpoint 2 at 0x7c74: file boot/bootmain.c, line 87.
	(gdb) c
	Continuing.
	=> 0x7c00 <start>:	cli    

	Breakpoint 1, start () at boot/bootasm.S:15
	15		cli								# Disable interrupts
	(gdb) stepi
	=> 0x7c01 <start+1>:	cld    
	16		cld								# String operations increment
	(gdb) stepi
	=> 0x7c02 <start+2>:	xor    %eax,%eax
	19		xorw %ax, %ax							# Segment number zero
	(gdb) stepi
	=> 0x7c04 <start+4>:	mov    %eax,%ds
	20		movw %ax, %ds							# -> Data Segment
	(gdb) stepi
	=> 0x7c06 <start+6>:	mov    %eax,%es
	21		movw %ax, %es							# -> Extra Segment
	(gdb) stepi
	=> 0x7c08 <start+8>:	mov    %eax,%ss
	22		movw %ax, %ss							# -> Stack Segment
	(gdb) stepi
	=> 0x7c0a <seta20.1>:	in     $0x64,%al
	29		inb $0x64, %al							# Wait for not busy
	(gdb) stepi
	=> 0x7c0c <seta20.1+2>:	test   $0x2,%al
	30		testb $0x2, %al
	(gdb) stepi
	=> 0x7c0e <seta20.1+4>:	jne    0x7c0a <seta20.1>
	31		jnz seta20.1
	(gdb) stepi
	=> 0x7c10 <seta20.1+6>:	mov    $0xd1,%al
	33		movb $0xd1, %al							# 0xd1 -> port 0x64
	(gdb) stepi
	=> 0x7c12 <seta20.1+8>:	out    %al,$0x64
	34		outb %al, $0x64
	(gdb) stepi
	=> 0x7c14 <seta20.2>:	in     $0x64,%al
	37		inb $0x64, %al							# Wait for not busy
	(gdb) stepi
	=> 0x7c16 <seta20.2+2>:	test   $0x2,%al
	38		testb $0x2, %al
	(gdb) stepi
	=> 0x7c18 <seta20.2+4>:	jne    0x7c14 <seta20.2>
	39		jnz seta20.2
	(gdb) stepi
	=> 0x7c1a <seta20.2+6>:	mov    $0xdf,%al
	41		movb $0xdf, %al							# 0xdf -> port 0x60
	(gdb) stepi
	=> 0x7c1c <seta20.2+8>:	out    %al,$0x60
	42		outb %al, $0x60
	(gdb) stepi
	=> 0x7c1e <seta20.2+10>:	lgdtl  (%esi)
	48		lgdt gdtdesc
	(gdb) stepi
	=> 0x7c23 <seta20.2+15>:	mov    %cr0,%eax
	49		movl %cr0, %eax
	(gdb) stepi
	=> 0x7c26 <seta20.2+18>:	or     $0x1,%ax
	50		orl $CR0_PE_ON, %eax
	(gdb) stepi
	=> 0x7c2a <seta20.2+22>:	mov    %eax,%cr0
	51		movl %eax, %cr0
	(gdb) stepi
	=> 0x7c2d <seta20.2+25>:	ljmp   $0xb866,$0x87c32
	55		ljmp $PROT_MODE_CSEG, $protcseg
	(gdb) stepi
	=> 0x7c32 <protcseg>:	mov    $0x10,%ax
	60		movw $PROT_MODE_DSEG, %ax					# Our data segment selector
	(gdb) stepi
	=> 0x7c36 <protcseg+4>:	mov    %eax,%ds
	61		movw %ax, %ds							# -> DS: Data Segment
	(gdb) stepi
	=> 0x7c38 <protcseg+6>:	mov    %eax,%es
	62		movw %ax, %es							# -> ES: Extra Segment
	(gdb) stepi
	=> 0x7c3a <protcseg+8>:	mov    %eax,%fs
	63		movw %ax, %fs							# -> FS
	(gdb) stepi
	=> 0x7c3c <protcseg+10>:	mov    %eax,%gs
	64		movw %ax, %gs							# -> GS
	(gdb) stepi
	=> 0x7c3e <protcseg+12>:	mov    %eax,%ss
	65		movw %ax, %ss							# -> SS: Stack Segment
	(gdb) stepi
	=> 0x7c40 <protcseg+14>:	mov    $0x0,%ebp
	68		movl $0x0, %ebp
	(gdb) stepi
	=> 0x7c45 <protcseg+19>:	mov    $0x7c00,%esp
	69		movl $start, %esp
	(gdb) stepi
	=> 0x7c4a <protcseg+24>:	call   0x7c74 <bootmain>
	70		call bootmain
	(gdb) stepi
	=> 0x7c74 <bootmain>:	push   %ebp

	Breakpoint 2, bootmain () at boot/bootmain.c:87
	87	bootmain(void) {
	(gdb) stepi
	=> 0x7c75 <bootmain+1>:	mov    %esp,%ebp
	0x00007c75	87	bootmain(void) {
	(gdb) stepi
	=> 0x7c77 <bootmain+3>:	push   %edi
	0x00007c77	87	bootmain(void) {
	(gdb) stepi
	=> 0x7c78 <bootmain+4>:	push   %esi
	0x00007c78	87	bootmain(void) {
	(gdb) stepi
	=> 0x7c79 <bootmain+5>:	push   %ebx
	0x00007c79	87	bootmain(void) {
	(gdb) stepi
	=> 0x7c7a <bootmain+6>:	sub    $0x8,%esp
	0x00007c7a	87	bootmain(void) {

与bootasm.S和 bootblock.asm进行比较发现，bootasm.S中在
	call bootmain
前的汇编代码与跟踪得到的反汇编代码前半部分基本相同（替换变量后），而bootblock.asm与跟踪得到的代码完全一样。这是因为bootloader由bootblock.o得到，bootblock.asm是由bootblock.o反汇编得到的，而bootblock.o由bootasm.o和bootmain.o链接得到，这两者由bootasm.S和bootmain.c编译得到。

4. 自己找一个bootloader或内核中的代码位置，设置断点并进行测试。
答：在proj1的bootmain.c中，设置断点使得每次输出一个字符后停一下：
	(gdb) break bootmain.c:81
	Breakpoint 3 at 0x7c89: file boot/bootmain.c, line 81.
运行后结果与预期一样，每一次断点
	(gdb) c
	Continuing.
	=> 0x7c89 <bootmain+21>:	movsbl %al,%edi

	Breakpoint 3, bootmain () at boot/bootmain.c:88
	88		cons_puts("This is a bootloader: Hello world!!");


-- 练习3：分析BIOS启动过程

 . 查看BIOS中前6条指令的内容, 参考Phil Storrs I/O Ports Description大致了解并说明这些指令的含义。
答：如下：
	0xfffffff0:  ljmp   $0xf000,$0xe05b	#跳转至0xfe05b地址处，然后执行指令内容
	0x000fe05b:  jmp    0xfc81e		#跳转至0xfc81e地址处，然后执行指令内容
	0x000fc81e:  mov    %cr0,%eax		#将寄存器cr0的值赋给寄存器eax
	0x000fc821:  and    $0x9fffffff,%eax	#将eax（储存cr0的值，32位，从右到左为第0~31位）中的
						#  第29、30位设为0；控制寄存器cr0的位30是CD标志，
						#  控制系统存储器位置的cache，如果CD标志被清0，
						#  那么cache对整个存储器是有效的。控制寄存器cr0的位29
						#  是NW标志，对系统存储器位置控制写策略。如果NW和CD标志
						#  被清0，那么写回对整个系统存储器被允许，但可以通过
						#  其它Cache控制机制对存储器的个别的页或区域进行限制。
	0x000fc827:  mov    %eax,%cr0		#将改后的值由寄存器eax赋回寄存器cr0
	0x000fc82a:  cli			#关中断


-- 练习4：分析bootloader启动过程

 . bootloader如何做准备（建立GDT表等）并进入保护模式的？
答：如下：
（1）
	.globl start
	start:
	.code16			# Assemble for 16-bit mode
	cli			# 关中断
	cld			# 字符串运算加
（2）
	# 设置重要的段寄存器(DS, ES, SS).
	xorw %ax, %ax		# Segment number zero
	movw %ax, %ds		# -> Data Segment
	movw %ax, %es		# -> Extra Segment
	movw %ax, %ss		# -> Stack Segment
（3）
	# 开启A20: 为了兼容8086，解决wrap-around的bug，IBM使用键盘控制器上剩余的一些输出线来管理第21条地址线（从0开始为20），称为A20。如果A20被开启，当程序员给出0x100000~0x10ffef之间的地址时，系统将真正访问这块内存区域；如果A20被禁用，则系统仍按照8086/8088的方式，回绕从0开始找内存区域。
seta20.1:
	inb $0x64, %al		# Wait for not busy
	testb $0x2, %al
	jnz seta20.1

	movb $0xd1, %al		# 0xd1 -> port 0x64
	outb %al, $0x64

seta20.2:
	inb $0x64, %al		# Wait for not busy
	testb $0x2, %al
	jnz seta20.2

	movb $0xdf, %al		# 0xdf -> port 0x60
	outb %al, $0x60
（4）
	lgdt gdtdesc		#重新加载GDT表
	movl %cr0, %eax		
	orl $CR0_PE_ON, %eax	#设置CR0寄存器PE位，PE位（第0位）是
				# 启用保护（Protection Enable）标志位。
				# 该位为0时为实地址模式，设置为1时
				# 开启保护模式，开启分页机制
	movl %eax, %cr0		

	ljmp $PROT_MODE_CSEG, $protcseg
进入32位模式，$PROT_MODE_CSEG表示段选择子，被加载到CS寄存器中，$protcseg被加载到IP寄存器中。CS、IP寄存器会重新加载，后面的代码都在32位保护模式下执行。


--  练习5：分析bootloader加载ELF格式的OS

1. bootloader如何读取硬盘扇区的？
答：在proj3的bootmain.c中的readsect函数实现，过程大致如下：
	/* readsect - read a single sector at @secno into @dst */
	static void
	readsect(void *dst, uint32_t secno) {
		// 第1步：等待硬盘准备好
		waitdisk();
		
		// 第2步：发出读取扇区的命令
		outb(0x1F2, 1);					// 读取一个扇区
		outb(0x1F3, secno & 0xFF);			// LBA参数的0~7位
		outb(0x1F4, (secno >> 8) & 0xFF);		// LBA参数的8~15位
		outb(0x1F5, (secno >> 16) & 0xFF);		// LBA参数的16~23位
		outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);	// LBA参数的24~27位
		outb(0x1F7, 0x20);				// 状态和命令寄存器。命令 0x20 - 读取扇区

		// 第3步：等待硬盘准备好
		waitdisk();

		// 第4步：把磁盘扇区数据读取到指定内存
		insl(0x1F0, dst, SECTSIZE / 4);
	}

2. bootloader是如何加载ELF格式的OS？
答：具体在bootmain.c的函数main()中实现：
	// 读取硬盘的第一页（载入kernel的文件头）
	readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);

	// 判断是否为有效的ELF
	if (ELFHDR->e_magic != ELF_MAGIC) {
		goto bad;
	}

	struct proghdr *ph, *eph;

	// 从硬盘载入程序片段到内存(忽略ph标志)
	ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
	eph = ph + ELFHDR->e_phnum;
	for (; ph < eph; ph ++) {
		readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
	}

	// 从elf->entry为入口进入程序
	// 注意：不返回
	((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();


--  练习6：实现函数调用堆栈跟踪函数

1. 在汇编中如何调用C语言中的函数，需要做哪些准备工作？
答：（1）首次在汇编中调用C语言中函数时，需要设定函数桟寄存器esp，即分配堆栈。
（2）然后保存寄存器值。
（3）将函数所需参数依次从后向前压入堆栈中。
如：
# Set up the stack pointer and call into C.
	movl $0x0, %ebp
	movl $start, %esp
	call bootmain

2. bootloader和OS的link地址和和load地址的区别是什么？
答：bootloader被加载时需要加载到内存单元的地址，此时在实模式中，该地址是实地址（物理地址）；OS被加载时，已经切换到保护模式，所以加载地址是虚拟地址。

函数kern/debug/kdebug.c:print_stackframe的实现过程：
这个函数用来实现函数调用信息（通过访问栈中的数据）。实现方法：
在每次循环中输出ebp和eip（通过指针获得内容），并输出函数的前4个参数。再按当前ebp值，找到下一个eip，更新ebp的值为当前ebp指向的值，然后进入下一轮循环。
其中还要注意的是，read_ebp()和read_eip()两个函数的性质不同：read_ebp()是inline函数，而read_eip()不是inline函数。


练习7：中断初始化和处理
1. （保护模式中）中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？
答：中断向量表中一个表项占8个字节，其中第0～15，48～63位代表中断处理代码的入口。

2. 完成trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。注意除了系统调用中断(T_SYSCALL)以外，其它中断均使用中断门描述符，权限为内核态权限；而系统调用中断使用异常，权限为陷阱门描述符。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。
实现方法：
将中断信息添至idt数组中。中断号为128（T_SYSCALL）的中断的特权级（3）和中断类型（陷入中断）需要特殊处理。最后设置IDTR寄存器，值为idt表的首地址。

3. 完成trap.c中的中断处理函数trap对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。
实现方法：
trap_dispatch()函数中，对于case IRQ_OFFSET + IRQ_TIMER，ticks将增加1，ticks满100（ticks%100 == 0）时，则调用print_ticks()打印字符。